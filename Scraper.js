// scraper.js
// –ó–∞–ø—É—Å–∫–∞–µ—Ç headless-–±—Ä–∞—É–∑–µ—Ä, –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –ø—É–±–ª–∏—á–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –Ø–Ω–¥–µ–∫—Å.–ü—Ä–æ–±–æ–∫ –ø–æ –í–æ—Ä–æ–Ω–µ–∂—É,
// –∏–∑–≤–ª–µ–∫–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è —Ç–∏–ø–∞ "accident" –∏ —à–ª—ë—Ç –Ω–æ–≤—ã–µ –≤ Telegram —á–µ—Ä–µ–∑ Bot API.

const fs = require('fs');
const path = require('path');
const puppeteer = require('puppeteer');
const fetch = (...args) => import('node-fetch').then(({default: f}) => f(...args));

/**
 * === –ù–ê–°–¢–†–û–ô–ö–ò: –í–°–¢–ê–í–¨ –°–Æ–î–ê –°–í–û–ò –ó–ù–ê–ß–ï–ù–ò–Ø ===
 */
const TELEGRAM_BOT_TOKEN = "8219557838:AAE18HofoNDD6gpn9LqbNtfMiEIOV3HPLF8";
const TELEGRAM_CHAT_ID = "7523840597"; // –Ω–∞–ø—Ä–∏–º–µ—Ä, "-1001234567890" –¥–ª—è –∫–∞–Ω–∞–ª–∞ –∏–ª–∏ "12345678" –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
// –ü—É–±–ª–∏—á–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—Ä–æ–±–æ–∫ –¥–ª—è –í–æ—Ä–æ–Ω–µ–∂–∞ ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
const YANDEX_PROBKI_URL = "https://yandex.ru/maps/51/voronezh/?ll=39.181225%2C51.703947&z=12&l=trf";

/**
 * –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É, –≥–¥–µ —Ö—Ä–∞–Ω–∏–º —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—ë–Ω–Ω—ã–µ id/—Ö—ç—à–∏
 */
const SEEN_FILE = path.join(__dirname, 'seen.json');

let seen = new Set();
try {
  const raw = fs.readFileSync(SEEN_FILE, 'utf8');
  const arr = JSON.parse(raw);
  arr.forEach(x => seen.add(x));
} catch (e) {
  console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å seen.json ‚Äî –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π.');
}

/**
 * –°–æ—Ö—Ä–∞–Ω—è–µ–º seen –≤ —Ñ–∞–π–ª
 */
function saveSeen() {
  try {
    fs.writeFileSync(SEEN_FILE, JSON.stringify(Array.from(seen)), 'utf8');
  } catch (e) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è seen.json', e);
  }
}

/**
 * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
 */
async function sendTelegram(text) {
  const url = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`;
  const body = {
    chat_id: TELEGRAM_CHAT_ID,
    text,
    parse_mode: 'HTML',
    disable_web_page_preview: false
  };
  const res = await fetch(url, {
    method: 'POST',
    headers: {'Content-Type': 'application/json'},
    body: JSON.stringify(body)
  });
  const j = await res.json();
  if (!j.ok) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:', j);
  }
  return j;
}

/**
 * –§—É–Ω–∫—Ü–∏—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π –î–¢–ü —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã Yandex.–ü—Ä–æ–±–∫–∏
 */
async function extractAccidentsFromPage(page) {
  // –≤—ã–ø–æ–ª–Ω—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ JS, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ JSON/—Å–æ—Å—Ç–æ—è–Ω–∏–µ
  const result = await page.evaluate(() => {
    // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Å–∫—Ä–∏–ø—Ç, –≥–¥–µ –µ—Å—Ç—å window.__state__ (—á–∞—Å—Ç–æ –∏–º–µ–Ω–Ω–æ —Ç–∞–º –ª–µ–∂–∏—Ç JSON)
    const scripts = Array.from(document.querySelectorAll('script'));
    for (const s of scripts) {
      if (s.textContent && s.textContent.includes('window.__state__')) {
        const text = s.textContent;
        const start = text.indexOf('window.__state__ = ');
        if (start !== -1) {
          const jsonStart = start + 'window.__state__ = '.length;
          const semicolon = text.indexOf(';', jsonStart);
          if (semicolon !== -1) {
            const jsonText = text.slice(jsonStart, semicolon).trim();
            try {
              const obj = JSON.parse(jsonText);
              return {source: 'window.__state__', data: obj};
            } catch (e) {
              // parse error
            }
          }
        }
      }
    }

    // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø—É—Ç—å: –∏–Ω–æ–≥–¥–∞ –¥–∞–Ω–Ω—ã–µ –ø–æ–¥–≥—Ä—É–∂–∞—é—Ç—Å—è –≤ –¥—Ä—É–≥–∏—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö, –ø–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ 'traffic' –≤ —Ç–µ–∫—Å—Ç–µ —Å–∫—Ä–∏–ø—Ç–æ–≤.
    for (const s of scripts) {
      const t = s.textContent || '';
      if (t.includes('"traffic"') && t.length < 500000) {
        try {
          const idx = t.indexOf('{');
          const jsonText = t.slice(idx);
          const obj = JSON.parse(jsonText);
          return {source: 'script-json', data: obj};
        } catch (e) {
          // ignore
        }
      }
    }

    // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–∏, –ø–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –≤ DOM –º–µ—Ç–∫–∏ –ø—Ä–æ–±–æ–∫ (–Ω–æ —ç—Ç–æ –Ω–µ–Ω–∞–¥—ë–∂–Ω–æ)
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º null
    return {source: 'none', data: null};
  });

  if (!result || !result.data) return [];

  // –¢–µ–ø–µ—Ä—å –ø–æ–ø—ã—Ç–∞–µ–º—Å—è –∏–∑ result.data –Ω–∞–π—Ç–∏ –æ–±—ä–µ–∫—Ç—ã –ø—Ä–æ–±–æ–∫/–º–∞—è—á–∫–æ–≤.
  // –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –º–æ–∂–µ—Ç –º–µ–Ω—è—Ç—å—Å—è; –±—É–¥–µ–º –∏—Å–∫–∞—Ç—å —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—ä–µ–∫—Ç—ã —Å –∫–ª—é—á–æ–º "features" –∏–ª–∏ "traffic".
  function findTrafficNodes(obj) {
    if (!obj || typeof obj !== 'object') return [];
    const out = [];
    if (Array.isArray(obj)) {
      for (const item of obj) out.push(...findTrafficNodes(item));
      return out;
    }
    // –µ—Å–ª–∏ –Ω–∞—à–ª–∏ node —Å features –≥–¥–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å–æ–¥–µ—Ä–∂–∞—Ç geometry/properties/event
    if (Array.isArray(obj.features)) {
      out.push(obj);
    }
    for (const k of Object.keys(obj)) {
      out.push(...findTrafficNodes(obj[k]));
    }
    return out;
  }

  const nodes = findTrafficNodes(result.data);
  const accidents = [];

  for (const node of nodes) {
    for (const f of node.features || []) {
      try {
        const props = f.properties || {};
        const ev = props.event || props.events || props;
        const type = ev && ev.type ? ev.type : (props.type || null);
        if (type === 'accident' || (props && props.event && props.event.type === 'accident')) {
          let coords = null;
          if (f.geometry && Array.isArray(f.geometry.coordinates)) {
            // coordinates often [lon, lat]
            coords = f.geometry.coordinates;
          } else if (f.center && Array.isArray(f.center)) {
            coords = f.center;
          }
          const address = props.name || props.title || (props.address && props.address.full) || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–¥—Ä–µ—Å';
          accidents.push({
            id: props.id || props.hash || JSON.stringify([address, coords]),
            address,
            coords,
            raw: props
          });
        }
      } catch (e) {
        // ignore
      }
    }
  }

  // –£–¥–∞–ª–∏–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ id
  const unique = {};
  accidents.forEach(a => {
    unique[a.id] = a;
  });
  return Object.values(unique);
}

/**
 * –ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª
 */
(async () => {
  if (!TELEGRAM_BOT_TOKEN || !TELEGRAM_CHAT_ID) {
    console.error('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ TELEGRAM_BOT_TOKEN –∏ TELEGRAM_CHAT_ID –≤ —Ñ–∞–π–ª–µ scraper.js');
    process.exit(1);
  }

  const browser = await puppeteer.launch({
    headless: true,
    args: ['--no-sandbox', '--disable-setuid-sandbox']
  });

  const page = await browser.newPage();
  // –£—Å—Ç–∞–Ω–æ–≤–∏–º —é–∑–µ—Ä–∞–≥–µ–Ω—Ç, —á—Ç–æ–±—ã —Å–Ω–∏–∑–∏—Ç—å —à–∞–Ω—Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
  await page.setUserAgent('Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120 Safari/537.36');

  // –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
  const CHECK_INTERVAL = 60 * 1000 * 2; // –∫–∞–∂–¥—ã–µ 2 –º–∏–Ω—É—Ç—ã ‚Äî –º–æ–∂–Ω–æ —É–≤–µ–ª–∏—á–∏—Ç—å –¥–æ 5 –º–∏–Ω—É—Ç (300000)

  console.log('–ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –î–¢–ü...');

  while (true) {
    try {
      console.log(new Date().toISOString(), '–û—Ç–∫—Ä—ã–≤–∞—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–æ–±–æ–∫...');
      await page.goto(YANDEX_PROBKI_URL, {waitUntil: 'networkidle2', timeout: 60000});
      // –ü–æ–¥–æ–∂–¥—ë–º —á—É—Ç—å-—á—É—Ç—å, —á—Ç–æ–±—ã JS –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–æ–¥–≥—Ä—É–∑–∏–ª –¥–∞–Ω–Ω—ã–µ
      await page.waitForTimeout(2500);

      const accidents = await extractAccidentsFromPage(page);
      console.log('–ù–∞–π–¥–µ–Ω–æ –î–¢–ü:', accidents.length);

      for (const a of accidents) {
        const uniqueId = String(a.id);
        if (!seen.has(uniqueId)) {
          // —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
          let mapLink = 'https://yandex.ru/maps/probki';
          if (a.coords && Array.isArray(a.coords)) {
            // coords –º–æ–∂–µ—Ç –±—ã—Ç—å [lon, lat] –∏–ª–∏ [lat, lon] ‚Äî –ø–æ–ø—Ä–æ–±—É–µ–º –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–∑–º–µ—Ä
            let lon = a.coords[0], lat = a.coords[1];
            // –µ—Å–ª–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤—ã–≥–ª—è–¥—è—Ç –Ω–µ –∫–∞–∫ –¥–æ–ª–≥–æ—Ç–∞/—à–∏—Ä–æ—Ç–∞, –Ω–µ –º–µ–Ω—è—Ç—å
            mapLink = `https://yandex.ru/maps/probki/?ll=${lon},${lat}&z=16&l=trf%2Ctrfe&trf=info`;
          }
          const message = `üöó <b>–î–¢–ü</b>\n${a.address}\n–ö–∞—Ä—Ç–∞: ${mapLink}`;
          console.log('–û—Ç–ø—Ä–∞–≤–ª—è—é –≤ Telegram:', message);
          await sendTelegram(message);
          // –æ—Ç–º–µ—Ç–∏–º –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ
          seen.add(uniqueId);
        } else {
          // —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
        }
      }

      // —Å–æ—Ö—Ä–∞–Ω—è–µ–º seen –Ω–∞ –¥–∏—Å–∫
      saveSeen();

    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏:', err);
    }

    // –∂–¥–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª
    console.log('–û–∂–∏–¥–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π...');
    await new Promise(res => setTimeout(res, CHECK_INTERVAL));
  }

  // await browser.close();
})();
